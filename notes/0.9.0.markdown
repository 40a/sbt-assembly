### Speed improvements

sbt-assembly 0.9.0 intoduces new caching behavior contributed by [@d40cht][@d40cht] as [#83][83].

- sbt-assembly unzips each dependency jar before re-assembling the contents of each jar into a single jar. Previously this happened again for each assembly run, but now the result of the unzip is cached from run-to-run. This provides good performance improvements. The new boolean option `cacheUnzip in assembly` (default `true`) can be set to `false` to disable this behavior.
- In addition, `assemblyCacheOutput` has been modified so the jar itself is sha1 hashed (significantly quicker), instead of individual contents, to determine whether `assembly` needs to be re-run.
- In combination, these two options can reduce the run-time of the second invocation of assembly (when nothing has changed) by up to 5 times on sample test projects.

Example run-times for a large-ish build, with multiple (eleven) projects with assembly target are below. The commands run for each build were: `;clean;package` (untimed) and then three runs of `assembly`:

Run number | No caching | Cache unzip | Cache unzip + cache output
---- | --- | --- | ---
1st | 99s | 101s | 85s
2nd | 119s | 34s | 12s
3rd | 102s | 32s | 12s

### Minor bug fixes and enhancements

- `rootdoc.txt` is concatenating by default to work around Scala 2.10.2-RC1 jars adding `rootdoc.txt`. [#84][84] reported by [@xuwei-k][@xuwei-k].

  [83]: https://github.com/sbt/sbt-assembly/pull/83
  [84]: https://github.com/sbt/sbt-assembly/issues/84
  [@d40cht]: https://github.com/d40cht
  [@xuwei-k]: https://github.com/xuwei-k
